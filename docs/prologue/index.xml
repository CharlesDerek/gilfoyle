<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Prologue on</title><link>/docs/prologue/</link><description>Recent content in Prologue on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="/docs/prologue/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>/docs/prologue/introduction/</link><pubDate>Sat, 27 Feb 2021 08:48:57 +0000</pubDate><guid>/docs/prologue/introduction/</guid><description>‚ùó As this project is very recent, it's under heavy development and not suitable for production yet. Please consider version 0 as unstable. Over time, media streaming evolved in a good way. Users can host videos for free, they can enjoy fast and adaptative streaming. But these pros often come with some conditions or limitations. For example, you are required to agree to the service&amp;rsquo;s business model (YouTube, Vimeo, &amp;hellip;), you have to agree with the upload rate limit, bad transcoding settings making your content looking ugly.</description></item><item><title>How it works</title><link>/docs/prologue/how-it-works/</link><pubDate>Sat, 27 Feb 2021 08:48:57 +0000</pubDate><guid>/docs/prologue/how-it-works/</guid><description>Gilfoyle was designed to be hidden from the public network, so only your internal services can communicate with it. This way, you can create a proxy gateway for your users, or simply add your own logic before sending user data to Gilfoyle.
Architecture Here&amp;rsquo;s an overview of how your application interact with Gilfoyle.
When a client uploads a media file, it is processed by a background job that perform analysis on the file then start encoding the media in several renditions, according to the provided settings.</description></item></channel></rss>