// Code generated by entc, DO NOT EDIT.

package mediafile

import (
	"time"

	"github.com/dreamvo/gilfoyle/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their identifier.
func ID(id uuid.UUID) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// VideoBitrate applies equality check predicate on the "video_bitrate" field. It's identical to VideoBitrateEQ.
func VideoBitrate(v int64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoBitrate), v))
	})
}

// ScaledWidth applies equality check predicate on the "scaled_width" field. It's identical to ScaledWidthEQ.
func ScaledWidth(v int16) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScaledWidth), v))
	})
}

// Framerate applies equality check predicate on the "framerate" field. It's identical to FramerateEQ.
func Framerate(v int8) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFramerate), v))
	})
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v float64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationSeconds), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// VideoBitrateEQ applies the EQ predicate on the "video_bitrate" field.
func VideoBitrateEQ(v int64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoBitrate), v))
	})
}

// VideoBitrateNEQ applies the NEQ predicate on the "video_bitrate" field.
func VideoBitrateNEQ(v int64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVideoBitrate), v))
	})
}

// VideoBitrateIn applies the In predicate on the "video_bitrate" field.
func VideoBitrateIn(vs ...int64) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVideoBitrate), v...))
	})
}

// VideoBitrateNotIn applies the NotIn predicate on the "video_bitrate" field.
func VideoBitrateNotIn(vs ...int64) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVideoBitrate), v...))
	})
}

// VideoBitrateGT applies the GT predicate on the "video_bitrate" field.
func VideoBitrateGT(v int64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVideoBitrate), v))
	})
}

// VideoBitrateGTE applies the GTE predicate on the "video_bitrate" field.
func VideoBitrateGTE(v int64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVideoBitrate), v))
	})
}

// VideoBitrateLT applies the LT predicate on the "video_bitrate" field.
func VideoBitrateLT(v int64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVideoBitrate), v))
	})
}

// VideoBitrateLTE applies the LTE predicate on the "video_bitrate" field.
func VideoBitrateLTE(v int64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVideoBitrate), v))
	})
}

// ScaledWidthEQ applies the EQ predicate on the "scaled_width" field.
func ScaledWidthEQ(v int16) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScaledWidth), v))
	})
}

// ScaledWidthNEQ applies the NEQ predicate on the "scaled_width" field.
func ScaledWidthNEQ(v int16) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScaledWidth), v))
	})
}

// ScaledWidthIn applies the In predicate on the "scaled_width" field.
func ScaledWidthIn(vs ...int16) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScaledWidth), v...))
	})
}

// ScaledWidthNotIn applies the NotIn predicate on the "scaled_width" field.
func ScaledWidthNotIn(vs ...int16) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScaledWidth), v...))
	})
}

// ScaledWidthGT applies the GT predicate on the "scaled_width" field.
func ScaledWidthGT(v int16) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScaledWidth), v))
	})
}

// ScaledWidthGTE applies the GTE predicate on the "scaled_width" field.
func ScaledWidthGTE(v int16) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScaledWidth), v))
	})
}

// ScaledWidthLT applies the LT predicate on the "scaled_width" field.
func ScaledWidthLT(v int16) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScaledWidth), v))
	})
}

// ScaledWidthLTE applies the LTE predicate on the "scaled_width" field.
func ScaledWidthLTE(v int16) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScaledWidth), v))
	})
}

// EncoderPresetEQ applies the EQ predicate on the "encoder_preset" field.
func EncoderPresetEQ(v EncoderPreset) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEncoderPreset), v))
	})
}

// EncoderPresetNEQ applies the NEQ predicate on the "encoder_preset" field.
func EncoderPresetNEQ(v EncoderPreset) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEncoderPreset), v))
	})
}

// EncoderPresetIn applies the In predicate on the "encoder_preset" field.
func EncoderPresetIn(vs ...EncoderPreset) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEncoderPreset), v...))
	})
}

// EncoderPresetNotIn applies the NotIn predicate on the "encoder_preset" field.
func EncoderPresetNotIn(vs ...EncoderPreset) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEncoderPreset), v...))
	})
}

// FramerateEQ applies the EQ predicate on the "framerate" field.
func FramerateEQ(v int8) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFramerate), v))
	})
}

// FramerateNEQ applies the NEQ predicate on the "framerate" field.
func FramerateNEQ(v int8) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFramerate), v))
	})
}

// FramerateIn applies the In predicate on the "framerate" field.
func FramerateIn(vs ...int8) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFramerate), v...))
	})
}

// FramerateNotIn applies the NotIn predicate on the "framerate" field.
func FramerateNotIn(vs ...int8) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFramerate), v...))
	})
}

// FramerateGT applies the GT predicate on the "framerate" field.
func FramerateGT(v int8) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFramerate), v))
	})
}

// FramerateGTE applies the GTE predicate on the "framerate" field.
func FramerateGTE(v int8) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFramerate), v))
	})
}

// FramerateLT applies the LT predicate on the "framerate" field.
func FramerateLT(v int8) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFramerate), v))
	})
}

// FramerateLTE applies the LTE predicate on the "framerate" field.
func FramerateLTE(v int8) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFramerate), v))
	})
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v float64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationSeconds), v))
	})
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v float64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDurationSeconds), v))
	})
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...float64) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDurationSeconds), v...))
	})
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...float64) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDurationSeconds), v...))
	})
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v float64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDurationSeconds), v))
	})
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v float64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDurationSeconds), v))
	})
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v float64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDurationSeconds), v))
	})
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v float64) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDurationSeconds), v))
	})
}

// MediaTypeEQ applies the EQ predicate on the "media_type" field.
func MediaTypeEQ(v MediaType) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaType), v))
	})
}

// MediaTypeNEQ applies the NEQ predicate on the "media_type" field.
func MediaTypeNEQ(v MediaType) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMediaType), v))
	})
}

// MediaTypeIn applies the In predicate on the "media_type" field.
func MediaTypeIn(vs ...MediaType) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMediaType), v...))
	})
}

// MediaTypeNotIn applies the NotIn predicate on the "media_type" field.
func MediaTypeNotIn(vs ...MediaType) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMediaType), v...))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MediaFile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MediaFile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MediaTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.Media) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MediaInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.MediaFile) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.MediaFile) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MediaFile) predicate.MediaFile {
	return predicate.MediaFile(func(s *sql.Selector) {
		p(s.Not())
	})
}
