// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/dreamvo/gilfoyle/ent/mediafile"
	"github.com/dreamvo/gilfoyle/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// MediaFileUpdate is the builder for updating MediaFile entities.
type MediaFileUpdate struct {
	config
	hooks    []Hook
	mutation *MediaFileMutation
}

// Where adds a new predicate for the builder.
func (mfu *MediaFileUpdate) Where(ps ...predicate.MediaFile) *MediaFileUpdate {
	mfu.mutation.predicates = append(mfu.mutation.predicates, ps...)
	return mfu
}

// SetVideoBitrate sets the video_bitrate field.
func (mfu *MediaFileUpdate) SetVideoBitrate(i int16) *MediaFileUpdate {
	mfu.mutation.ResetVideoBitrate()
	mfu.mutation.SetVideoBitrate(i)
	return mfu
}

// AddVideoBitrate adds i to video_bitrate.
func (mfu *MediaFileUpdate) AddVideoBitrate(i int16) *MediaFileUpdate {
	mfu.mutation.AddVideoBitrate(i)
	return mfu
}

// SetScaledWidth sets the scaled_width field.
func (mfu *MediaFileUpdate) SetScaledWidth(i int16) *MediaFileUpdate {
	mfu.mutation.ResetScaledWidth()
	mfu.mutation.SetScaledWidth(i)
	return mfu
}

// AddScaledWidth adds i to scaled_width.
func (mfu *MediaFileUpdate) AddScaledWidth(i int16) *MediaFileUpdate {
	mfu.mutation.AddScaledWidth(i)
	return mfu
}

// SetEncoderPreset sets the encoder_preset field.
func (mfu *MediaFileUpdate) SetEncoderPreset(mp mediafile.EncoderPreset) *MediaFileUpdate {
	mfu.mutation.SetEncoderPreset(mp)
	return mfu
}

// SetFramerate sets the framerate field.
func (mfu *MediaFileUpdate) SetFramerate(i int8) *MediaFileUpdate {
	mfu.mutation.ResetFramerate()
	mfu.mutation.SetFramerate(i)
	return mfu
}

// AddFramerate adds i to framerate.
func (mfu *MediaFileUpdate) AddFramerate(i int8) *MediaFileUpdate {
	mfu.mutation.AddFramerate(i)
	return mfu
}

// SetDurationSeconds sets the duration_seconds field.
func (mfu *MediaFileUpdate) SetDurationSeconds(i int64) *MediaFileUpdate {
	mfu.mutation.ResetDurationSeconds()
	mfu.mutation.SetDurationSeconds(i)
	return mfu
}

// AddDurationSeconds adds i to duration_seconds.
func (mfu *MediaFileUpdate) AddDurationSeconds(i int64) *MediaFileUpdate {
	mfu.mutation.AddDurationSeconds(i)
	return mfu
}

// SetMediaType sets the media_type field.
func (mfu *MediaFileUpdate) SetMediaType(mt mediafile.MediaType) *MediaFileUpdate {
	mfu.mutation.SetMediaType(mt)
	return mfu
}

// SetCreatedAt sets the created_at field.
func (mfu *MediaFileUpdate) SetCreatedAt(t time.Time) *MediaFileUpdate {
	mfu.mutation.SetCreatedAt(t)
	return mfu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mfu *MediaFileUpdate) SetNillableCreatedAt(t *time.Time) *MediaFileUpdate {
	if t != nil {
		mfu.SetCreatedAt(*t)
	}
	return mfu
}

// SetUpdatedAt sets the updated_at field.
func (mfu *MediaFileUpdate) SetUpdatedAt(t time.Time) *MediaFileUpdate {
	mfu.mutation.SetUpdatedAt(t)
	return mfu
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mfu *MediaFileUpdate) SetNillableUpdatedAt(t *time.Time) *MediaFileUpdate {
	if t != nil {
		mfu.SetUpdatedAt(*t)
	}
	return mfu
}

// Mutation returns the MediaFileMutation object of the builder.
func (mfu *MediaFileUpdate) Mutation() *MediaFileMutation {
	return mfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mfu *MediaFileUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mfu.hooks) == 0 {
		if err = mfu.check(); err != nil {
			return 0, err
		}
		affected, err = mfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mfu.check(); err != nil {
				return 0, err
			}
			mfu.mutation = mutation
			affected, err = mfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mfu.hooks) - 1; i >= 0; i-- {
			mut = mfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mfu *MediaFileUpdate) SaveX(ctx context.Context) int {
	affected, err := mfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mfu *MediaFileUpdate) Exec(ctx context.Context) error {
	_, err := mfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mfu *MediaFileUpdate) ExecX(ctx context.Context) {
	if err := mfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mfu *MediaFileUpdate) check() error {
	if v, ok := mfu.mutation.VideoBitrate(); ok {
		if err := mediafile.VideoBitrateValidator(v); err != nil {
			return &ValidationError{Name: "video_bitrate", err: fmt.Errorf("ent: validator failed for field \"video_bitrate\": %w", err)}
		}
	}
	if v, ok := mfu.mutation.ScaledWidth(); ok {
		if err := mediafile.ScaledWidthValidator(v); err != nil {
			return &ValidationError{Name: "scaled_width", err: fmt.Errorf("ent: validator failed for field \"scaled_width\": %w", err)}
		}
	}
	if v, ok := mfu.mutation.EncoderPreset(); ok {
		if err := mediafile.EncoderPresetValidator(v); err != nil {
			return &ValidationError{Name: "encoder_preset", err: fmt.Errorf("ent: validator failed for field \"encoder_preset\": %w", err)}
		}
	}
	if v, ok := mfu.mutation.Framerate(); ok {
		if err := mediafile.FramerateValidator(v); err != nil {
			return &ValidationError{Name: "framerate", err: fmt.Errorf("ent: validator failed for field \"framerate\": %w", err)}
		}
	}
	if v, ok := mfu.mutation.DurationSeconds(); ok {
		if err := mediafile.DurationSecondsValidator(v); err != nil {
			return &ValidationError{Name: "duration_seconds", err: fmt.Errorf("ent: validator failed for field \"duration_seconds\": %w", err)}
		}
	}
	if v, ok := mfu.mutation.MediaType(); ok {
		if err := mediafile.MediaTypeValidator(v); err != nil {
			return &ValidationError{Name: "media_type", err: fmt.Errorf("ent: validator failed for field \"media_type\": %w", err)}
		}
	}
	return nil
}

func (mfu *MediaFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mediafile.Table,
			Columns: mediafile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mediafile.FieldID,
			},
		},
	}
	if ps := mfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mfu.mutation.VideoBitrate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: mediafile.FieldVideoBitrate,
		})
	}
	if value, ok := mfu.mutation.AddedVideoBitrate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: mediafile.FieldVideoBitrate,
		})
	}
	if value, ok := mfu.mutation.ScaledWidth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: mediafile.FieldScaledWidth,
		})
	}
	if value, ok := mfu.mutation.AddedScaledWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: mediafile.FieldScaledWidth,
		})
	}
	if value, ok := mfu.mutation.EncoderPreset(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mediafile.FieldEncoderPreset,
		})
	}
	if value, ok := mfu.mutation.Framerate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: mediafile.FieldFramerate,
		})
	}
	if value, ok := mfu.mutation.AddedFramerate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: mediafile.FieldFramerate,
		})
	}
	if value, ok := mfu.mutation.DurationSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: mediafile.FieldDurationSeconds,
		})
	}
	if value, ok := mfu.mutation.AddedDurationSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: mediafile.FieldDurationSeconds,
		})
	}
	if value, ok := mfu.mutation.MediaType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mediafile.FieldMediaType,
		})
	}
	if value, ok := mfu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mediafile.FieldCreatedAt,
		})
	}
	if value, ok := mfu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mediafile.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mediafile.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MediaFileUpdateOne is the builder for updating a single MediaFile entity.
type MediaFileUpdateOne struct {
	config
	hooks    []Hook
	mutation *MediaFileMutation
}

// SetVideoBitrate sets the video_bitrate field.
func (mfuo *MediaFileUpdateOne) SetVideoBitrate(i int16) *MediaFileUpdateOne {
	mfuo.mutation.ResetVideoBitrate()
	mfuo.mutation.SetVideoBitrate(i)
	return mfuo
}

// AddVideoBitrate adds i to video_bitrate.
func (mfuo *MediaFileUpdateOne) AddVideoBitrate(i int16) *MediaFileUpdateOne {
	mfuo.mutation.AddVideoBitrate(i)
	return mfuo
}

// SetScaledWidth sets the scaled_width field.
func (mfuo *MediaFileUpdateOne) SetScaledWidth(i int16) *MediaFileUpdateOne {
	mfuo.mutation.ResetScaledWidth()
	mfuo.mutation.SetScaledWidth(i)
	return mfuo
}

// AddScaledWidth adds i to scaled_width.
func (mfuo *MediaFileUpdateOne) AddScaledWidth(i int16) *MediaFileUpdateOne {
	mfuo.mutation.AddScaledWidth(i)
	return mfuo
}

// SetEncoderPreset sets the encoder_preset field.
func (mfuo *MediaFileUpdateOne) SetEncoderPreset(mp mediafile.EncoderPreset) *MediaFileUpdateOne {
	mfuo.mutation.SetEncoderPreset(mp)
	return mfuo
}

// SetFramerate sets the framerate field.
func (mfuo *MediaFileUpdateOne) SetFramerate(i int8) *MediaFileUpdateOne {
	mfuo.mutation.ResetFramerate()
	mfuo.mutation.SetFramerate(i)
	return mfuo
}

// AddFramerate adds i to framerate.
func (mfuo *MediaFileUpdateOne) AddFramerate(i int8) *MediaFileUpdateOne {
	mfuo.mutation.AddFramerate(i)
	return mfuo
}

// SetDurationSeconds sets the duration_seconds field.
func (mfuo *MediaFileUpdateOne) SetDurationSeconds(i int64) *MediaFileUpdateOne {
	mfuo.mutation.ResetDurationSeconds()
	mfuo.mutation.SetDurationSeconds(i)
	return mfuo
}

// AddDurationSeconds adds i to duration_seconds.
func (mfuo *MediaFileUpdateOne) AddDurationSeconds(i int64) *MediaFileUpdateOne {
	mfuo.mutation.AddDurationSeconds(i)
	return mfuo
}

// SetMediaType sets the media_type field.
func (mfuo *MediaFileUpdateOne) SetMediaType(mt mediafile.MediaType) *MediaFileUpdateOne {
	mfuo.mutation.SetMediaType(mt)
	return mfuo
}

// SetCreatedAt sets the created_at field.
func (mfuo *MediaFileUpdateOne) SetCreatedAt(t time.Time) *MediaFileUpdateOne {
	mfuo.mutation.SetCreatedAt(t)
	return mfuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (mfuo *MediaFileUpdateOne) SetNillableCreatedAt(t *time.Time) *MediaFileUpdateOne {
	if t != nil {
		mfuo.SetCreatedAt(*t)
	}
	return mfuo
}

// SetUpdatedAt sets the updated_at field.
func (mfuo *MediaFileUpdateOne) SetUpdatedAt(t time.Time) *MediaFileUpdateOne {
	mfuo.mutation.SetUpdatedAt(t)
	return mfuo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (mfuo *MediaFileUpdateOne) SetNillableUpdatedAt(t *time.Time) *MediaFileUpdateOne {
	if t != nil {
		mfuo.SetUpdatedAt(*t)
	}
	return mfuo
}

// Mutation returns the MediaFileMutation object of the builder.
func (mfuo *MediaFileUpdateOne) Mutation() *MediaFileMutation {
	return mfuo.mutation
}

// Save executes the query and returns the updated entity.
func (mfuo *MediaFileUpdateOne) Save(ctx context.Context) (*MediaFile, error) {
	var (
		err  error
		node *MediaFile
	)
	if len(mfuo.hooks) == 0 {
		if err = mfuo.check(); err != nil {
			return nil, err
		}
		node, err = mfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mfuo.check(); err != nil {
				return nil, err
			}
			mfuo.mutation = mutation
			node, err = mfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mfuo.hooks) - 1; i >= 0; i-- {
			mut = mfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mfuo *MediaFileUpdateOne) SaveX(ctx context.Context) *MediaFile {
	node, err := mfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mfuo *MediaFileUpdateOne) Exec(ctx context.Context) error {
	_, err := mfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mfuo *MediaFileUpdateOne) ExecX(ctx context.Context) {
	if err := mfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mfuo *MediaFileUpdateOne) check() error {
	if v, ok := mfuo.mutation.VideoBitrate(); ok {
		if err := mediafile.VideoBitrateValidator(v); err != nil {
			return &ValidationError{Name: "video_bitrate", err: fmt.Errorf("ent: validator failed for field \"video_bitrate\": %w", err)}
		}
	}
	if v, ok := mfuo.mutation.ScaledWidth(); ok {
		if err := mediafile.ScaledWidthValidator(v); err != nil {
			return &ValidationError{Name: "scaled_width", err: fmt.Errorf("ent: validator failed for field \"scaled_width\": %w", err)}
		}
	}
	if v, ok := mfuo.mutation.EncoderPreset(); ok {
		if err := mediafile.EncoderPresetValidator(v); err != nil {
			return &ValidationError{Name: "encoder_preset", err: fmt.Errorf("ent: validator failed for field \"encoder_preset\": %w", err)}
		}
	}
	if v, ok := mfuo.mutation.Framerate(); ok {
		if err := mediafile.FramerateValidator(v); err != nil {
			return &ValidationError{Name: "framerate", err: fmt.Errorf("ent: validator failed for field \"framerate\": %w", err)}
		}
	}
	if v, ok := mfuo.mutation.DurationSeconds(); ok {
		if err := mediafile.DurationSecondsValidator(v); err != nil {
			return &ValidationError{Name: "duration_seconds", err: fmt.Errorf("ent: validator failed for field \"duration_seconds\": %w", err)}
		}
	}
	if v, ok := mfuo.mutation.MediaType(); ok {
		if err := mediafile.MediaTypeValidator(v); err != nil {
			return &ValidationError{Name: "media_type", err: fmt.Errorf("ent: validator failed for field \"media_type\": %w", err)}
		}
	}
	return nil
}

func (mfuo *MediaFileUpdateOne) sqlSave(ctx context.Context) (_node *MediaFile, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mediafile.Table,
			Columns: mediafile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mediafile.FieldID,
			},
		},
	}
	id, ok := mfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MediaFile.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := mfuo.mutation.VideoBitrate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: mediafile.FieldVideoBitrate,
		})
	}
	if value, ok := mfuo.mutation.AddedVideoBitrate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: mediafile.FieldVideoBitrate,
		})
	}
	if value, ok := mfuo.mutation.ScaledWidth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: mediafile.FieldScaledWidth,
		})
	}
	if value, ok := mfuo.mutation.AddedScaledWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: mediafile.FieldScaledWidth,
		})
	}
	if value, ok := mfuo.mutation.EncoderPreset(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mediafile.FieldEncoderPreset,
		})
	}
	if value, ok := mfuo.mutation.Framerate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: mediafile.FieldFramerate,
		})
	}
	if value, ok := mfuo.mutation.AddedFramerate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: mediafile.FieldFramerate,
		})
	}
	if value, ok := mfuo.mutation.DurationSeconds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: mediafile.FieldDurationSeconds,
		})
	}
	if value, ok := mfuo.mutation.AddedDurationSeconds(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: mediafile.FieldDurationSeconds,
		})
	}
	if value, ok := mfuo.mutation.MediaType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: mediafile.FieldMediaType,
		})
	}
	if value, ok := mfuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mediafile.FieldCreatedAt,
		})
	}
	if value, ok := mfuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: mediafile.FieldUpdatedAt,
		})
	}
	_node = &MediaFile{config: mfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, mfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mediafile.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
