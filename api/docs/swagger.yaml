basePath: /
definitions:
  api.CreateVideo:
    properties:
      title:
        example: Sheep Discovers How To Use A Trampoline
        type: string
    type: object
  api.UpdateVideo:
    properties:
      title:
        example: Sheep Discovers How To Use A Trampoline
        type: string
    type: object
  ent.Video:
    properties:
      created_at:
        type: string
      id:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  httputils.DataResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        type: object
    type: object
  httputils.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
host: demo-v1.gilfoyle.dreamvo.com
info:
  contact: {}
  description: Video streaming server backed by decentralized filesystem.
  license:
    name: GNU General Public License v3.0
    url: https://github.com/dreamvo/gilfoyle/blob/master/LICENSE
  title: Gilfoyle server
  version: 0.1-beta
paths:
  /health:
    get:
      description: Check for the health of the service
      operationId: checkHealth
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Check service status
      tags:
      - health
  /videos:
    get:
      description: get latest videos
      operationId: getAllVideos
      parameters:
      - description: Max number of results
        in: query
        name: limit
        type: integer
      - description: Number of results to ignore
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/httputils.DataResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.Video'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
      summary: Query videos
      tags:
      - videos
    post:
      consumes:
      - application/json
      description: Create a new video
      operationId: createVideo
      parameters:
      - description: Video title
        in: body
        name: video
        required: true
        schema:
          $ref: '#/definitions/api.CreateVideo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/httputils.DataResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Video'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
      summary: Create a video
      tags:
      - videos
  /videos/{id}:
    delete:
      description: Delete one video
      operationId: deleteVideo
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputils.DataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
      summary: Delete a video
      tags:
      - videos
    get:
      description: get one video
      operationId: getVideo
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/httputils.DataResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Video'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
      summary: Get a video
      tags:
      - videos
    patch:
      consumes:
      - application/json
      description: Update an existing video
      operationId: updateVideo
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: string
      - description: Video title
        in: body
        name: video
        required: true
        schema:
          $ref: '#/definitions/api.UpdateVideo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/httputils.DataResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Video'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
      summary: Update a video
      tags:
      - videos
  /videos/{id}/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a new video file for a given video ID
      operationId: uploadVideoFile
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: string
      - description: Video file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/httputils.DataResponse'
            - properties:
                data:
                  $ref: '#/definitions/ent.Video'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorResponse'
      summary: Upload a video file
      tags:
      - videos
schemes:
- http
- https
swagger: "2.0"
