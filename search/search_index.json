{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Dreamvo Dreamvo was born in 2018 by Rapha\u00ebl Cerveaux who wanted to create an alternative social network to share videos with freedom and open source in mind. After almost two years of stand-by, we realized there's already a tons of those projects and YouTube is still dominating the market. Projects Gilfoyle - Video streaming server backed by decentralized filesystem","title":"About Dreamvo"},{"location":"#about-dreamvo","text":"Dreamvo was born in 2018 by Rapha\u00ebl Cerveaux who wanted to create an alternative social network to share videos with freedom and open source in mind. After almost two years of stand-by, we realized there's already a tons of those projects and YouTube is still dominating the market.","title":"About Dreamvo"},{"location":"#projects","text":"Gilfoyle - Video streaming server backed by decentralized filesystem","title":"Projects"},{"location":"gilfoyle/","text":"About Gilfoyle is a web application from the Dreamvo project that runs a self-hosted video streaming server. This application allows you to setup a production-ready video hosting & live streaming platform in minutes. Gilfoyle handles video upload, processing and streaming. It's written in Golang and runs as a single Linux binary with PostgreSQL and Redis. Features Deploy a RESTful API to manage your videos Upload videos from file or import from platforms such as: YouTube, Dailymotion, Vimeo Handle video compression and conversion asynchronously with FFmpeg Decentralize video storage with IPFS clustering feature Enjoy IPFS 's cache & CDN features Collect analytics such as watch time and view count","title":"About"},{"location":"gilfoyle/#about","text":"Gilfoyle is a web application from the Dreamvo project that runs a self-hosted video streaming server. This application allows you to setup a production-ready video hosting & live streaming platform in minutes. Gilfoyle handles video upload, processing and streaming. It's written in Golang and runs as a single Linux binary with PostgreSQL and Redis.","title":"About"},{"location":"gilfoyle/#features","text":"Deploy a RESTful API to manage your videos Upload videos from file or import from platforms such as: YouTube, Dailymotion, Vimeo Handle video compression and conversion asynchronously with FFmpeg Decentralize video storage with IPFS clustering feature Enjoy IPFS 's cache & CDN features Collect analytics such as watch time and view count","title":"Features"},{"location":"gilfoyle/design/","text":"// architecture (REST + workers) Goals Privacy & security by default Gilfoyle was created in an effort to bring a new privacy and watch experience to end-users. This application collects very few things about end-user and tend to keep it that way. Althrough we take security very seriously, the API was not designed to be exposed to the public network. Usually administrator would isolate the interface in a security group with access limited to other services. Gilfoyle shouldn't be the backend of your application but a private storage service used by your own API. Still, you can deploy and expose this service in production. Customization The service may have some configuration settings to be controlled by administrator such as max file size, target transcoding format, compression rate... To achieve that, administrator would use a simple Yaml file that centralize these settings. If any config file is provided, default settings are used. Some open source projects can be difficult to use because of too many configuration settings. Gilfoyle is easy to use : simply download a binary, run it and access the web service. Want to deploy to production? Use the production-ready Docker image or see container orchestration examples. Of course, this application was designed to follow your application's scale. You can even scale your own IPFS cluster . Documentation as code We want documentation to be part of the code, so its always up-to-date and developers can understand snippets very quickly. We defines API's specifications using OpenAPI with swagger.","title":"Design"},{"location":"gilfoyle/design/#goals","text":"Privacy & security by default Gilfoyle was created in an effort to bring a new privacy and watch experience to end-users. This application collects very few things about end-user and tend to keep it that way. Althrough we take security very seriously, the API was not designed to be exposed to the public network. Usually administrator would isolate the interface in a security group with access limited to other services. Gilfoyle shouldn't be the backend of your application but a private storage service used by your own API. Still, you can deploy and expose this service in production. Customization The service may have some configuration settings to be controlled by administrator such as max file size, target transcoding format, compression rate... To achieve that, administrator would use a simple Yaml file that centralize these settings. If any config file is provided, default settings are used. Some open source projects can be difficult to use because of too many configuration settings. Gilfoyle is easy to use : simply download a binary, run it and access the web service. Want to deploy to production? Use the production-ready Docker image or see container orchestration examples. Of course, this application was designed to follow your application's scale. You can even scale your own IPFS cluster . Documentation as code We want documentation to be part of the code, so its always up-to-date and developers can understand snippets very quickly. We defines API's specifications using OpenAPI with swagger.","title":"Goals"}]}